import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from config import BOT_TOKEN, AUTHORIZED_PHONES, SUPER_GROUP_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏–Ω–≥–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s: %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
    logging.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ config.py")
    exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authorized_users = {}

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AWR!\n\n"
        "üîë –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=keyboard
    )

@dp.message(lambda message: message.contact is not None)
async def contact_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    phone = message.contact.phone_number
    user_id = message.from_user.id
    
    # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª '+' –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    clean_phone = phone.replace('+', '')
    
    if clean_phone in AUTHORIZED_PHONES:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        authorized_users[user_id] = phone
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ localhost –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        app_url = os.getenv('WEB_APP_URL', 'http://localhost:5000')
        webapp = WebAppInfo(url=app_url)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webapp)]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            "‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
            "üöÄ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å AWR.",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            "‚ùå –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.\n\n"
            "üìû –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

async def send_report_to_group(report_data, task_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É"""
    message_text = f"""
üìù –ù–æ–≤—ã–π –æ—Ç—á—ë—Ç

üè† –ê–¥—Ä–µ—Å: {task_data['address']}
üë• –ë—Ä–∏–≥–∞–¥–∞: {report_data['brigade']}
üîß –í–∏–¥ —Ä–∞–±–æ—Ç: {task_data['work_type']}

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report_data['comment']}
üîë –î–æ—Å—Ç—É–ø: {report_data['access']}

üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:
"""
    
    for material in report_data['materials']:
        message_text += f"- {material['name']}: {material['quantity']}\n"
    
    try:
        await bot.send_message(SUPER_GROUP_ID, message_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        for photo in report_data['photos']:
            photo_path = f"uploads/photos/{photo}"
            with open(photo_path, 'rb') as photo_file:
                await bot.send_photo(SUPER_GROUP_ID, photo_file)
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç AWR –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
