"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π bot.py –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Render.com
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
SUPER_GROUP_ID = int(os.getenv('SUPER_GROUP_ID', '0')) if os.getenv('SUPER_GROUP_ID') else None

# –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã (–∏–∑ config)
AUTHORIZED_PHONES = [
    '+7(900)000-00-01',  # superadmin
    '+7(900)000-00-02',  # admin1
    '+7(900)000-00-03',  # brigade1
    '+7(900)000-00-04',  # warehouse1
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏–Ω–≥–∞ –¥–ª—è Render.com
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s: %(message)s',
    handlers=[
        logging.StreamHandler()  # –¢–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è Render
    ]
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def check_bot_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logging.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω BOT_TOKEN! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render Dashboard")
        return False
    
    if not SUPER_GROUP_ID:
        logging.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω SUPER_GROUP_ID! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render Dashboard")
        return False
    
    logging.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

if not check_bot_config():
    logging.error("üö® –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authorized_users = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"
        
        logging.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            "üèóÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AWR Management System!</b>\n\n"
            "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "üìã <i>–î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏.</i>",
            parse_mode="HTML",
            reply_markup=kb
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(types.ContentType.CONTACT)
async def process_contact(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        contact = message.contact
        phone = contact.phone_number
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"
        
        logging.info(f"üì± –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        normalized_phone = phone
        if phone.startswith('8'):
            normalized_phone = '+7' + phone[1:]
        elif phone.startswith('7'):
            normalized_phone = '+' + phone
        elif not phone.startswith('+'):
            normalized_phone = '+' + phone
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        is_authorized = False
        for auth_phone in AUTHORIZED_PHONES:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            clean_auth = ''.join(filter(str.isdigit, auth_phone))
            clean_received = ''.join(filter(str.isdigit, normalized_phone))
            
            if clean_auth.endswith(clean_received[-10:]) or clean_received.endswith(clean_auth[-10:]):
                is_authorized = True
                break
        
        if is_authorized:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            import random
            auth_code = f"{random.randint(1000, 9999)}"
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            authorized_users[user_id] = {
                'phone': normalized_phone,
                'username': username,
                'auth_code': auth_code,
                'timestamp': message.date
            }
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
            if SUPER_GROUP_ID:
                try:
                    await bot.send_message(
                        SUPER_GROUP_ID,
                        f"üîê <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {normalized_phone}\n"
                        f"üî¢ –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: <code>{auth_code}</code>\n\n"
                        f"üìÖ –í—Ä–µ–º—è: {message.date.strftime('%d.%m.%Y %H:%M')}",
                        parse_mode="HTML"
                    )
                    logging.info(f"‚úÖ –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –¥–ª—è {username}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            
            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"‚úÖ <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                f"üî¢ –í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: <code>{auth_code}</code>\n\n"
                f"üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-—Å–∏—Å—Ç–µ–º—É AWR.\n"
                f"‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.",
                parse_mode="HTML",
                reply_markup=types.ReplyKeyboardRemove()
            )
            
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {normalized_phone} –æ—Ç {username}")
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
                parse_mode="HTML",
                reply_markup=types.ReplyKeyboardRemove()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_contact: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.ReplyKeyboardRemove()
        )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É AWR</b>\n\n"
        "üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üîê <b>–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ /start\n"
        "2. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-—Å–∏—Å—Ç–µ–º—É\n\n"
        "üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        parse_mode="HTML"
    )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logging.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ AWR...")
        logging.info(f"üÜî Bot ID: {(await bot.get_me()).id}")
        logging.info(f"üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(AUTHORIZED_PHONES)}")
        
        # –ó–∞–ø—É—Å–∫ polling
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logging.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()
        logging.info("üîí –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
    except Exception as e:
        logging.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
